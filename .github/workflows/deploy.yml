name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      run: |
        docker buildx build \
          --platform linux/amd64 \
          --tag yamnor/sbnote:latest \
          --tag yamnor/sbnote:${{ github.sha }} \
          --push .
    
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Deploy to server
      run: |
        # Debug SSH connection
        echo "Testing SSH connection..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "echo 'SSH connection successful'"
        
        # Copy docker-compose.yml to server
        scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 docker-compose.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/apps/sbnote/
        
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Create .env file from secrets
          cat > ~/apps/sbnote/.env << 'ENVEOF'
          SBNOTE_AUTH_TYPE=password
          SBNOTE_USERNAME=${{ secrets.SBNOTE_USERNAME }}
          SBNOTE_PASSWORD=${{ secrets.SBNOTE_PASSWORD }}
          SBNOTE_SECRET_KEY=${{ secrets.SBNOTE_SECRET_KEY }}
          ENVEOF
          
          # Pull latest image and restart
          cd ~/apps/sbnote
          docker-compose pull
          docker-compose down
          docker-compose up -d
          
          # Health check
          echo "Waiting for application to start..."
          sleep 15
          if curl -f http://localhost:50010/health; then
            echo "Deployment successful!"
          else
            echo "Deployment failed - health check failed"
            exit 1
          fi
        EOF