#!/bin/bash

# SBNote Multi-User Management Script
# Manages multiple SBNote instances with individual domains and ports

set -euo pipefail

# Configuration
BASE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
USERS_DIR="$BASE_PATH/users"
NGINX_DIR="/etc/nginx/sites-available"
NGINX_ENABLED="/etc/nginx/sites-enabled"
LOG_FILE="$BASE_PATH/manage-users.log"
USERS_CONFIG="$BASE_PATH/users-config.json"



# Ensure required directories exist
mkdir -p "$USERS_DIR"
mkdir -p "$(dirname "$LOG_FILE")"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling
handle_error() {
    local exit_code=$?
    log "ERROR: Command failed with exit code $exit_code"
    log "Stack trace: ${BASH_SOURCE[*]}"
    exit $exit_code
}

trap handle_error ERR

# Input validation
validate_input() {
    local user_name="$1"
    local domain="$2"
    local port="$3"
    
    # Check for required parameters
    if [ -z "$user_name" ] || [ -z "$domain" ] || [ -z "$port" ]; then
        log "ERROR: Missing required parameters"
        return 1
    fi
    
    # Validate username (alphanumeric and underscore only)
    if [[ ! "$user_name" =~ ^[a-zA-Z0-9_]+$ ]]; then
        log "ERROR: Username must contain only alphanumeric characters and underscores"
        return 1
    fi
    
    # Validate port number
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1024 ] || [ "$port" -gt 65535 ]; then
        log "ERROR: Port must be a number between 1024 and 65535"
        return 1
    fi
    
    # Validate domain format (basic check)
    if [[ ! "$domain" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        log "ERROR: Invalid domain format"
        return 1
    fi
    
    return 0
}

# Check if port is available
check_port_availability() {
    local port="$1"
    
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        log "ERROR: Port $port is already in use"
        return 1
    fi
    
    if ss -tuln 2>/dev/null | grep -q ":$port "; then
        log "ERROR: Port $port is already in use"
        return 1
    fi
    
    return 0
}

# Check if domain is already configured
check_domain_availability() {
    local domain="$1"
    
    if [ -f "$NGINX_DIR/$domain" ]; then
        log "ERROR: Domain $domain is already configured"
        return 1
    fi
    
    return 0
}

# Create user
create_user() {
    local user_name="$1"
    local domain="$2"
    local port="$3"
    local password="$4"
    
    log "Starting user creation: $user_name (domain: $domain, port: $port)"
    
    # Input validation
    if ! validate_input "$user_name" "$domain" "$port"; then
        return 1
    fi
    
    # Check if user already exists
    if [ -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name already exists"
        return 1
    fi
    
    # Check port availability
    if ! check_port_availability "$port"; then
        return 1
    fi
    
    # Check domain availability
    if ! check_domain_availability "$domain"; then
        return 1
    fi
    
    # Create user directory
    mkdir -p "$USERS_DIR/$user_name/data"
    
    # Create docker-compose.yml
    cat > "$USERS_DIR/$user_name/docker-compose.yml" << EOF
services:
  sbnote:
    container_name: sbnote-$user_name
    image: yamnor/sbnote:latest
    platform: linux/amd64
    environment:
      PUID: $(id -u)
      PGID: $(id -g)
      SBNOTE_AUTH_TYPE: \${SBNOTE_AUTH_TYPE}
      SBNOTE_USERNAME: \${SBNOTE_USERNAME}
      SBNOTE_PASSWORD: \${SBNOTE_PASSWORD}
      SBNOTE_SECRET_KEY: \${SBNOTE_SECRET_KEY}
    volumes:
      - "./data:/data"
    ports:
      - "\${SBNOTE_PORT:-$port}:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
EOF
    
    # Create .env file
    cat > "$USERS_DIR/$user_name/.env" << EOF
SBNOTE_AUTH_TYPE=password
SBNOTE_USERNAME=$user_name
SBNOTE_PASSWORD=${password:-change-me-$(date +%s)}
SBNOTE_SECRET_KEY=$(openssl rand -hex 32)
SBNOTE_PORT=$port
EOF
    
    # Set proper permissions
    chmod 750 "$USERS_DIR/$user_name"
    chmod 750 "$USERS_DIR/$user_name/data"
    chmod 640 "$USERS_DIR/$user_name/.env"
    
    # Add user to configuration
    add_user_to_config "$user_name" "$domain" "$port" "${password:-change-me-$(date +%s)}"
    
    # Ensure nginx log directories exist
    sudo mkdir -p /var/log/nginx
    
    # Create nginx configuration
    sudo tee "$NGINX_DIR/$domain" > /dev/null << EOF
# Auto-generated by SBNote Multi-User Manager
# Do not edit manually - changes will be overwritten

server {
    listen 80;
    server_name $domain;
    
    # Logging
    access_log /var/log/nginx/sbnote-$user_name-access.log;
    error_log /var/log/nginx/sbnote-$user_name-error.log;
    
    location / {
        proxy_pass http://127.0.0.1:$port/;
        proxy_set_header Host \$http_host;
        proxy_set_header X-Real-IP \$http_cf_connecting_ip;
        proxy_set_header X-Forwarded-For \$http_cf_connecting_ip;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Additional headers for better compatibility
        proxy_set_header X-Forwarded-Proto \$http_x_forwarded_proto;
        proxy_set_header X-Forwarded-Host \$host;
    }
}
EOF
    
    # Enable nginx configuration
    sudo ln -sf "$NGINX_DIR/$domain" "$NGINX_ENABLED/"
    
    # Log the created nginx configuration for debugging
    log "Created nginx configuration for $domain:"
    sudo cat "$NGINX_DIR/$domain" | while read line; do
        log "  $line"
    done
    
    # Test nginx configuration
    local nginx_test_output
    if nginx_test_output=$(sudo nginx -t 2>&1); then
        sudo systemctl reload nginx
        log "Nginx configuration updated successfully"
    else
        log "ERROR: Invalid nginx configuration"
        log "Nginx test output:"
        echo "$nginx_test_output" | while read line; do
            log "  $line"
        done
        # Rollback
        if ! rm -rf "$USERS_DIR/$user_name" 2>/dev/null; then
            sudo rm -rf "$USERS_DIR/$user_name"
        fi
        sudo rm -f "$NGINX_DIR/$domain"
        sudo rm -f "$NGINX_ENABLED/$domain"
        return 1
    fi
    
    log "User $user_name created successfully"
    log "Please:"
    log "1. Edit $USERS_DIR/$user_name/.env to set password"
    log "2. Add DNS record for $domain"
    log "3. Start the user with: $0 start $user_name"
}

# Delete user
delete_user() {
    local user_name="$1"
    local domain="$2"
    
    log "Starting user deletion: $user_name"
    
    # Check if user exists
    if [ ! -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name does not exist"
        return 1
    fi
    
    # Stop and remove container
    if [ -f "$USERS_DIR/$user_name/docker-compose.yml" ]; then
        cd "$USERS_DIR/$user_name"
        if docker compose ps | grep -q "Up"; then
            log "Stopping container for user $user_name"
            docker compose down
        fi
    fi
    
    # Remove user directory (use sudo if needed)
    if ! rm -rf "$USERS_DIR/$user_name" 2>/dev/null; then
        log "Using sudo to remove user directory"
        sudo rm -rf "$USERS_DIR/$user_name"
    fi
    
    # Remove nginx configuration
    sudo rm -f "$NGINX_DIR/$domain"
    sudo rm -f "$NGINX_ENABLED/$domain"
    
    # Remove user from configuration
    remove_user_from_config "$user_name"
    
    # Test and reload nginx
    if sudo nginx -t >/dev/null 2>&1; then
        sudo systemctl reload nginx
        log "Nginx configuration updated successfully"
    else
        log "WARNING: Nginx configuration test failed after user deletion"
    fi
    
    log "User $user_name deleted successfully"
}

# Pull Docker image
pull_docker_image() {
    log "Pulling latest SBNote Docker image..."
    if docker pull yamnor/sbnote:latest; then
        log "Docker image pulled successfully"
        return 0
    else
        log "ERROR: Failed to pull Docker image"
        return 1
    fi
}

# Start user
start_user() {
    local user_name="$1"
    
    if [ ! -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name does not exist"
        return 1
    fi
    
    log "Starting user: $user_name"
    cd "$USERS_DIR/$user_name"
    
    # Pull latest image before starting
    pull_docker_image
    
    if docker compose up -d; then
        log "User $user_name started successfully"
    else
        log "ERROR: Failed to start user $user_name"
        return 1
    fi
}

# Stop user
stop_user() {
    local user_name="$1"
    
    if [ ! -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name does not exist"
        return 1
    fi
    
    log "Stopping user: $user_name"
    cd "$USERS_DIR/$user_name"
    
    if docker compose down; then
        log "User $user_name stopped successfully"
    else
        log "ERROR: Failed to stop user $user_name"
        return 1
    fi
}

# Restart user
restart_user() {
    local user_name="$1"
    
    if [ ! -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name does not exist"
        return 1
    fi
    
    log "Restarting user: $user_name"
    cd "$USERS_DIR/$user_name"
    
    # Use down and up to ensure environment variables are reloaded
    if docker compose down; then
        if docker compose up -d; then
            log "User $user_name restarted successfully"
        else
            log "ERROR: Failed to start user $user_name"
            return 1
        fi
    else
        log "ERROR: Failed to stop user $user_name"
        return 1
    fi
}

# Health check for user
health_check() {
    local user_name="$1"
    
    if [ ! -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name does not exist"
        return 1
    fi
    
    local env_file="$USERS_DIR/$user_name/.env"
    if [ ! -f "$env_file" ]; then
        log "ERROR: Environment file not found for user $user_name"
        return 1
    fi
    
    local port=$(grep SBNOTE_PORT "$env_file" | cut -d'=' -f2)
    if [ -z "$port" ]; then
        log "ERROR: Port not found for user $user_name"
        return 1
    fi
    
    if curl -f -s "http://localhost:$port/health" >/dev/null 2>&1; then
        log "✓ User $user_name is healthy (port: $port)"
        return 0
    else
        log "✗ User $user_name health check failed (port: $port)"
        return 1
    fi
}

# Operation for all users
operation_all() {
    local operation="$1"
    
    # Pull latest image before starting all users
    if [ "$operation" = "up -d" ]; then
        pull_docker_image
    fi
    
    local user_count=0
    local success_count=0
    
    for user_dir in "$USERS_DIR"/*/; do
        if [ -d "$user_dir" ]; then
            local user_name=$(basename "$user_dir")
            user_count=$((user_count + 1))
            
            log "=== $operation $user_name ==="
            cd "$user_dir"
            
            # Handle restart operation specially to ensure environment variables are reloaded
            if [ "$operation" = "restart" ]; then
                if docker compose down && docker compose up -d; then
                    success_count=$((success_count + 1))
                    log "✓ restart $user_name successful"
                else
                    log "✗ restart $user_name failed"
                fi
            else
                if docker compose $operation; then
                    success_count=$((success_count + 1))
                    log "✓ $operation $user_name successful"
                else
                    log "✗ $operation $user_name failed"
                fi
            fi
        fi
    done
    
    log "Operation '$operation' completed: $success_count/$user_count users successful"
}

# List all users
list_users() {
    echo "Available users:"
    echo "================"
    
    local user_count=0
    
    for user_dir in "$USERS_DIR"/*/; do
        if [ -d "$user_dir" ]; then
            local user_name=$(basename "$user_dir")
            local env_file="$user_dir/.env"
            local domain=$(basename "$NGINX_DIR"/* | grep "^$user_name\." | head -1)
            
            if [ -f "$env_file" ]; then
                local port=$(grep SBNOTE_PORT "$env_file" | cut -d'=' -f2)
                local username=$(grep SBNOTE_USERNAME "$env_file" | cut -d'=' -f2)
                
                # Check container status
                local status="Unknown"
                if [ -f "$user_dir/docker-compose.yml" ]; then
                    cd "$user_dir"
                    if docker compose ps | grep -q "Up"; then
                        status="Running"
                    else
                        status="Stopped"
                    fi
                fi
                
                echo "  - $user_name"
                echo "    Domain: $domain"
                echo "    Port: $port"
                echo "    Username: $username"
                echo "    Status: $status"
                echo ""
                
                user_count=$((user_count + 1))
            fi
        fi
    done
    
    if [ $user_count -eq 0 ]; then
        echo "  No users found"
    else
        echo "Total users: $user_count"
    fi
}

# Show logs for user
show_logs() {
    local user_name="$1"
    
    if [ ! -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name does not exist"
        return 1
    fi
    
    log "Showing logs for user: $user_name"
    cd "$USERS_DIR/$user_name"
    docker compose logs -f
}

# Update user password
update_password() {
    local user_name="$1"
    local password="$2"
    
    if [ ! -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name does not exist"
        return 1
    fi
    
    local env_file="$USERS_DIR/$user_name/.env"
    if [ ! -f "$env_file" ]; then
        log "ERROR: Environment file not found for user $user_name"
        return 1
    fi
    
    log "Updating password for user $user_name"
    
    # Update password in .env file
    sed -i "s/^SBNOTE_PASSWORD=.*/SBNOTE_PASSWORD=$password/" "$env_file"
    
    # Stop and start container to ensure environment variables are reloaded
    cd "$USERS_DIR/$user_name"
    log "Stopping container to reload environment variables"
    if docker compose down; then
        log "Container stopped successfully"
        if docker compose up -d; then
            log "Password updated and container restarted for user $user_name"
        else
            log "ERROR: Failed to start container for user $user_name"
            return 1
        fi
    else
        log "ERROR: Failed to stop container for user $user_name"
        return 1
    fi
}

# Load users configuration
load_users_config() {
    if [ -f "$USERS_CONFIG" ]; then
        cat "$USERS_CONFIG"
    else
        echo '[]'
    fi
}

# Save users configuration
save_users_config() {
    local config="$1"
    echo "$config" > "$USERS_CONFIG"
    log "Users configuration saved to $USERS_CONFIG"
}

# Add user to configuration
add_user_to_config() {
    local user_name="$1"
    local domain="$2"
    local port="$3"
    local password="$4"
    
    local config=$(load_users_config)
    local new_user=$(cat << EOF
{
  "username": "$user_name",
  "domain": "$domain",
  "port": "$port",
  "password": "$password"
}
EOF
)
    
    # Add user to config array
    local updated_config=$(echo "$config" | jq --argjson user "$new_user" '. += [$user]')
    save_users_config "$updated_config"
}

# Remove user from configuration
remove_user_from_config() {
    local user_name="$1"
    
    local config=$(load_users_config)
    local updated_config=$(echo "$config" | jq --arg username "$user_name" 'map(select(.username != $username))')
    save_users_config "$updated_config"
}

# Update user password in configuration
update_user_password_in_config() {
    local user_name="$1"
    local password="$2"
    
    local config=$(load_users_config)
    local updated_config=$(echo "$config" | jq --arg username "$user_name" --arg password "$password" 'map(if .username == $username then . + {"password": $password} else . end)')
    save_users_config "$updated_config"
}



# Deploy all users from configuration
deploy_all_users() {
    log "Starting deployment of all users from configuration"
    
    # Pull latest Docker image
    pull_docker_image
    
    local config=$(load_users_config)
    local user_count=$(echo "$config" | jq length)
    
    if [ "$user_count" -eq 0 ]; then
        log "No users configured"
        return 0
    fi
    
    log "Found $user_count users in configuration"
    
    # Process each user
    echo "$config" | jq -c '.[]' | while read -r user; do
        local username=$(echo "$user" | jq -r '.username')
        local domain=$(echo "$user" | jq -r '.domain')
        local port=$(echo "$user" | jq -r '.port')
        local password=$(echo "$user" | jq -r '.password')
        
        log "Processing user: $username"
        
        # Create user if doesn't exist
        if [ ! -d "$USERS_DIR/$username" ]; then
            log "Creating user $username"
            create_user "$username" "$domain" "$port" "$password"
        else
            log "User $username already exists, updating password"
            update_password "$username" "$password"
        fi
    done
    

    
    # Restart all users
    log "Restarting all users"
    operation_all "restart"
    
    # Wait for applications to start
    log "Waiting for applications to start..."
    sleep 30
    
    # Health check all users
    if health_check_all; then
        log "✓ All users are healthy"
        return 0
    else
        log "✗ Some users failed health check"
        return 1
    fi
}

# Health check all users
health_check_all() {
    local all_healthy=true
    for user_dir in "$USERS_DIR"/*/; do
        if [ -d "$user_dir" ]; then
            local user_name=$(basename "$user_dir")
            if ! health_check "$user_name"; then
                all_healthy=false
            fi
        fi
    done
    
    if [ "$all_healthy" = "true" ]; then
        return 0
    else
        return 1
    fi
}

# Backup user data
backup_user() {
    local user_name="$1"
    local backup_dir="$2"
    
    if [ ! -d "$USERS_DIR/$user_name" ]; then
        log "ERROR: User $user_name does not exist"
        return 1
    fi
    
    if [ -z "$backup_dir" ]; then
        backup_dir="$BASE_PATH/backups"
    fi
    
    mkdir -p "$backup_dir"
    
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_file="$backup_dir/$user_name-backup-$timestamp.tar.gz"
    
    log "Creating backup for user $user_name: $backup_file"
    
    # Temporarily adjust permissions for backup
    local original_perms=$(stat -c %a "$USERS_DIR/$user_name")
    local original_data_perms=""
    if [ -d "$USERS_DIR/$user_name/data" ]; then
        original_data_perms=$(stat -c %a "$USERS_DIR/$user_name/data")
    fi
    
    # Set readable permissions for backup (use sudo if needed)
    if ! chmod 755 "$USERS_DIR/$user_name" 2>/dev/null; then
        sudo chmod 755 "$USERS_DIR/$user_name"
    fi
    if [ -d "$USERS_DIR/$user_name/data" ]; then
        if ! chmod 755 "$USERS_DIR/$user_name/data" 2>/dev/null; then
            sudo chmod 755 "$USERS_DIR/$user_name/data"
        fi
    fi
    
    # Create backup
    local backup_success=false
    if tar -czf "$backup_file" -C "$USERS_DIR" "$user_name"; then
        log "Backup created successfully: $backup_file"
        backup_success=true
    else
        log "ERROR: Failed to create backup for user $user_name"
    fi
    
    # Restore original permissions (use sudo if needed)
    if ! chmod "$original_perms" "$USERS_DIR/$user_name" 2>/dev/null; then
        sudo chmod "$original_perms" "$USERS_DIR/$user_name"
    fi
    if [ -n "$original_data_perms" ] && [ -d "$USERS_DIR/$user_name/data" ]; then
        if ! chmod "$original_data_perms" "$USERS_DIR/$user_name/data" 2>/dev/null; then
            sudo chmod "$original_data_perms" "$USERS_DIR/$user_name/data"
        fi
    fi
    
    if [ "$backup_success" = "true" ]; then
        return 0
    else
        return 1
    fi
}

# Main command processing
case "$1" in
    "create")
        if [ $# -lt 4 ] || [ $# -gt 5 ]; then
            echo "Usage: $0 create <username> <domain> <port> [password]"
            echo "Example: $0 create user1 user1.sbnote.com 51000"
            echo "Example: $0 create user1 user1.sbnote.com 51000 mypassword123"
            exit 1
        fi
        create_user "$2" "$3" "$4" "${5:-}"
        ;;
    "delete")
        if [ $# -ne 3 ]; then
            echo "Usage: $0 delete <username> <domain>"
            echo "Example: $0 delete user1 user1.sbnote.com"
            exit 1
        fi
        delete_user "$2" "$3"
        ;;
    "start")
        if [ $# -eq 1 ] || [ -z "${2:-}" ]; then
            operation_all "up -d"
        else
            start_user "$2"
        fi
        ;;
    "stop")
        if [ $# -eq 1 ] || [ -z "${2:-}" ]; then
            operation_all "down"
        else
            stop_user "$2"
        fi
        ;;
    "restart")
        if [ $# -eq 1 ] || [ -z "${2:-}" ]; then
            operation_all "restart"
        else
            restart_user "$2"
        fi
        ;;
    "logs")
        if [ $# -eq 1 ] || [ -z "${2:-}" ]; then
            echo "Usage: $0 logs <username>"
            exit 1
        fi
        show_logs "$2"
        ;;
    "health-check")
        if [ $# -eq 1 ] || [ -z "${2:-}" ]; then
            # Check all users
            if health_check_all; then
                log "All users are healthy"
                exit 0
            else
                log "Some users are unhealthy"
                exit 1
            fi
        else
            health_check "$2"
        fi
        ;;
    "list")
        list_users
        ;;
    "backup")
        if [ $# -eq 1 ] || [ -z "${2:-}" ]; then
            echo "Usage: $0 backup <username> [backup_directory]"
            exit 1
        fi
        backup_user "$2" "${3:-}"
        ;;
    "update-password")
        if [ $# -ne 3 ]; then
            echo "Usage: $0 update-password <username> <password>"
            echo "Example: $0 update-password user1 mypassword123"
            exit 1
        fi
        update_password "$2" "$3"
        update_user_password_in_config "$2" "$3"
        ;;
    "deploy")
        deploy_all_users
        ;;
    "pull")
        pull_docker_image
        ;;

    "add-user")
        if [ $# -ne 5 ]; then
            echo "Usage: $0 add-user <username> <domain> <port> <password>"
            echo "Example: $0 add-user user1 user1.sbnote.com 51000 mypassword123"
            exit 1
        fi
        add_user_to_config "$2" "$3" "$4" "$5"
        ;;
    "remove-user")
        if [ $# -ne 2 ]; then
            echo "Usage: $0 remove-user <username>"
            echo "Example: $0 remove-user user1"
            exit 1
        fi
        remove_user_from_config "$2"
        ;;
    "status")
        if [ $# -eq 1 ] || [ -z "${2:-}" ]; then
            operation_all "ps"
        else
            if [ -d "$USERS_DIR/$2" ]; then
                cd "$USERS_DIR/$2"
                docker compose ps
            else
                log "ERROR: User $2 does not exist"
                exit 1
            fi
        fi
        ;;
    *)
        echo "SBNote Multi-User Management Script"
        echo "==================================="
        echo ""
        echo "Usage: $0 {create|delete|start|stop|restart|logs|health-check|list|backup|update-password|deploy|pull|add-user|remove-user|status} [username] [domain] [port]"
        echo ""
        echo "Commands:"
        echo "  create <username> <domain> <port> [password] - Create a new user"
        echo "  delete <username> <domain>         - Delete a user"
        echo "  start [username]                   - Start user(s)"
        echo "  stop [username]                    - Stop user(s)"
        echo "  restart [username]                 - Restart user(s)"
        echo "  logs <username>                    - Show logs for user"
        echo "  health-check [username]            - Check health of user(s)"
        echo "  list                               - List all users"
        echo "  backup <username> [directory]      - Backup user data"
        echo "  update-password <username> <pass>  - Update user password"
        echo "  deploy                             - Deploy all users from config"
        echo "  pull                               - Pull latest Docker image"
        echo "  add-user <user> <domain> <port> <pass> - Add user to config"
        echo "  remove-user <username>             - Remove user from config"
        echo "  status [username]                  - Show container status"
        echo ""
        echo "Examples:"
        echo "  $0 create user1 user1.sbnote.com 51000"
        echo "  $0 start user1"
        echo "  $0 start                          # Start all users"
        echo "  $0 logs user1"
        echo "  $0 health-check                   # Check all users"
        echo "  $0 list"
        echo "  $0 backup user1"
        exit 1
        ;;
esac 